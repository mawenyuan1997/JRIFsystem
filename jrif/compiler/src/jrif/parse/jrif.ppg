// Assumes jif.jar is in classpath
include "jif/parse/jif.ppg"

package jrif.parse;

import jrif.types.JrifTypeSystem;
import jrif.ast.*;
import jif.parse.*;
import KAT.*;
import KAToperator.*;
import SyKAT.*;
import SyKAToperator.*;
import utility.*;

parser Grm extends jif.parse.Grm {:
    public final JrifTypeSystem ts;
    public final JrifNodeFactory nf;

    public Grm(Lexer l, JrifTypeSystem t, JrifNodeFactory n, ErrorQueue q) {
        super(l, t, n, q);
        ts = t;
        nf = n;
    }
:};

terminal Token RECLASSIFY;
terminal Token RIF;
terminal Token RIFI;
terminal Token TR;
terminal Token ONE;
terminal Token ZERO;


non terminal RifPolicyNode rif_label;
non terminal RifPolicyNode rifi_label;
non terminal KatExprNode policy;
non terminal KatTestNode boolean;
non terminal List principal_set;

precedence left PLUS, OR;
precedence left XOR, AND;
precedence left COMP;
start with goal;

extend label_component ::=
        rif_label:a
            {: RESULT = a; :}
    |   rifi_label:a
            {: RESULT = a; :}
    ;

rif_label ::= 
     RIF COLON policy:a 
     {:RESULT = null; :}  //   1. invoke conversion  2. create ast (automata)
                          //   TODO
   ;

rifi_label ::= 
     RIFI COLON policy:a 
     {:RESULT = null; :}  // TODO
   ;
   
principal_set ::=
         LBRACE:x RBRACE:y
            {: List l = new LinkedList<PrincipalNode>();
               l.add(parser.nf.CanonicalPrincipalNode(parser.pos(x), parser.ts.topPrincipal(parser.pos(x))));
               RESULT = l; :}
    |    LBRACE:x principal_list:a RBRACE:y
            {: RESULT = a; :}
    ;

policy ::= 
      policy:p1 PLUS policy:p2        {: RESULT = new KatPlusNode(p1, p2); :}
    | policy:p1 XOR policy:p2         {: RESULT = new KatConcatNode(p1, p2); :}
    | policy:p MULT                   {: RESULT = new KatStarNode(p); :}
    | LPAREN policy:p RPAREN          {: RESULT = p; :}
    | boolean:b                       {: RESULT = b; :}
    | IDENTIFIER:p                    {: RESULT = new KatActionNode(parser.pos(p), p.getIdentifier()); :}
    ;

boolean ::=
      principal_set:p                 {: RESULT = new KatAtomNode(parser.pos(p), p); :}
    | accesspath_no_id:p              {: RESULT = new KatAtomNode(parser.pos(p), p); :}
    | ZERO                            {: RESULT = new KatZeroNode(); :}
    | ONE                             {: RESULT = new KatOneNode(); :}
    | boolean:b1 OR boolean:b2        {: RESULT = new KatOrNode(b1, b2); :}
    | boolean:b1 AND boolean:b2       {: RESULT = new KatAndNode(b1, b2); :}
    | LBRACK boolean:b RBRACK         {: RESULT = b; :}
    | COMP boolean:b                  {: RESULT = new KatNegateNode(b); :}
    ;



 