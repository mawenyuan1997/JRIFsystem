include "../../../../../../src/polyglot/parse/java12.cup"

package carray.parse;

import carray.types.CarrayTypeSystem;
import carray.ast.CarrayNodeFactory;
import polyglot.parse.*;

parser Grm extends polyglot.parse.Grm {:
    final CarrayTypeSystem ts;
    final CarrayNodeFactory nf;

    public Grm(Lexer l, TypeSystem t, NodeFactory n, ErrorQueue q) {
        super(l, t, n, q);
        ts = (CarrayTypeSystem) t;
        nf = (CarrayNodeFactory) n;
    }

    /**
      * Return a TypeNode representing a <code>dims</code>-dimensional
      * const array of <code>n</code>.
      */
    public TypeNode constArray(TypeNode n, int dims) throws Exception {
        if (dims > 0) {
            if (n instanceof CanonicalTypeNode) {
                Type t = ((CanonicalTypeNode) n).type();
                return nf.CanonicalTypeNode(n.position(),
                                            ts.constArrayOf(n.position(),
                                                            t, dims));
            }
            return nf.ConstArrayTypeNode(n.position(), constArray(n, dims-1));
        }
        else {
            return n;
        }
    }
:};

start with goal;


extend array_type ::=
                    // TypeNode
        primitive_type:a CONST dims:b
            {: RESULT = parser.constArray(a, b.intValue()); :}
    |   name:a CONST dims:b
            {: RESULT = parser.constArray(a.toType(), b.intValue()); :}
    ;


